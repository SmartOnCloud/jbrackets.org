options{  STATIC = false;  UNICODE_INPUT = true;  JAVA_UNICODE_ESCAPE = true;  JDK_VERSION = "1.5";  DEBUG_TOKEN_MANAGER = false;  ERROR_REPORTING = true;  SUPPORT_CLASS_VISIBILITY_PUBLIC = true;}PARSER_BEGIN(TemplateParser)package org.jbrackets.parser;import org.jbrackets.parser.tokens.*;import java.util.*;public class TemplateParser{  List < String > definedBlocks = new ArrayList < String > ();  public List < String > templates = new ArrayList < String > ();}PARSER_END(TemplateParser)TOKEN :{  < #SPACE : [ " ", "\n", "\r", "\t" ] >| < #BR_LFT : "{%" (< SPACE >)* >  // expression| < EXP_LFT : "{{" > : EXP  // block| < TAG_BLOCK : < BR_LFT > "block" > : PARAM| < TAG_ENDBLOCK : < BR_LFT > "endblock" > : PARAM  // extends| < TAG_EXTENDS : < BR_LFT > "extends" > : PARAM  // for| < TAG_FOR : < BR_LFT > "for" > : PARAM| < TAG_ENDFOR : < BR_LFT > "endfor" < END_BR > >  // if| < TAG_IF : < BR_LFT > "if" > : PARAM| < TAG_ELSE : < BR_LFT > "else" < END_BR > >| < TAG_ENDIF : < BR_LFT > "endif" < END_BR > >  // if| < TAG_INCLUDE : < BR_LFT > "include" > : PARAM  // comment| < TAG_COMMENT_START : "{#" >| < TAG_COMMENT_END : "#}" >}< EXP >TOKEN :{  < EXP_RGH : (< SPACE >)* "}}" > : DEFAULT}< DEFAULT, PARAM, EXP >TOKEN :{  < CHARACTER : [ "\u0000"-"\uFFFE" ] >}< PARAM >TOKEN :{  < END_BR : (< SPACE >)* "%}" > : DEFAULT}// --------- parser ----------TemplateToken process(String templateName) :{  definedBlocks = new ArrayList < String > ();  templates = new ArrayList < String > ();  TemplateToken tok = new TemplateToken(templateName);}{  [ tok = extends_tag(templateName) ] body(tok) < EOF >  {    return tok;  }}ExtendsTemplateToken extends_tag(String templateName) :{  String parentTemplate;}{  < TAG_EXTENDS > parentTemplate = tag_param() < END_BR >  {    templates.add(parentTemplate);    return new ExtendsTemplateToken(templateName, parentTemplate);  }}void body(BaseToken tok) :{  BaseToken child;}{  (    block_comment()  | < CHARACTER >    {      tok.appendText(token.image);    }  | child = expr()    {      tok.addToken(child);    }  | child = block_tag()    {      tok.addToken(child);    }  | child = for_tag()    {      tok.addToken(child);    }  | child = if_tag()    {      tok.addToken(child);    }  | child = include_tag()    {      tok.addToken(child);    }  )*}void block_comment() :{}{  < TAG_COMMENT_START > (< CHARACTER >)* < TAG_COMMENT_END >}BlockToken block_tag() :{  String startblock_Name;  String endblock_Name;  BlockToken block = new BlockToken();}{  < TAG_BLOCK > startblock_Name = tag_param()  {    block.setName(startblock_Name);  }  < END_BR > body(block) < TAG_ENDBLOCK > endblock_Name = opt_tag_param() < END_BR >  {    if (!endblock_Name.isEmpty() && !startblock_Name.equals(endblock_Name))  // check if endblock name is the same as startblock    throw new ParseException("expected {% endblock " + startblock_Name + " %}\nfound {% endblock " + endblock_Name + " %}\nat line " + token.beginLine + ", column " + token.beginColumn);    if (definedBlocks.contains(startblock_Name))    {      throw new ParseException("duplicate block definition {% block " + startblock_Name + " %}");    }    definedBlocks.add(startblock_Name);    return block;  }}ForLoopToken for_tag() :{  String param;  ForLoopToken tok = new ForLoopToken();}{  < TAG_FOR > param = tag_param() < END_BR > body(tok) < TAG_ENDFOR >  {    tok.setParam(param);    return tok;  }}IncludeToken include_tag() :{  String param;  IncludeToken tok = new IncludeToken();}{  < TAG_INCLUDE > param = tag_param() < END_BR >  {    tok.setParam(param);    templates.add(param);    return tok;  }}IfToken if_tag() :{  String param;  IfToken tok = new IfToken();}{  < TAG_IF > param = tag_param() < END_BR > body  (    tok.getIf()  )  [    < TAG_ELSE > body    (      tok.getElse()    )  ]  < TAG_ENDIF >  {    tok.setParam(param);    return tok;  }}ExpToken expr() :{  StringBuilder expr = new StringBuilder();}{  < EXP_LFT >  (    < CHARACTER >    {      expr.append(token.image);    }  )+  < EXP_RGH >  {    return new ExpToken(expr.toString());  }}// --- various helpers String tag_param() :{  StringBuilder val = new StringBuilder();}{  (    < CHARACTER >    {      val.append(token.image);    }  )+  {    return val.toString().trim();  }}String opt_tag_param() :{  StringBuilder val = new StringBuilder();}{  (    < CHARACTER >    {      val.append(token.image);    }  )*  {    return val.toString().trim();  }}